<!-- header with a dropdown menu and login -->
<header class="siteheader">
  <div class="siteheaderContainer">

    <div id="site-logo"><a href="/" id="site-logo">Learn Local</a></div>

    <div class="dropdown">
      <a class="btn btn-secondary dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown"
        aria-haspopup="true" aria-expanded="false">
        Browse
      </a>

      <div class="dropdown-content">
        {{#each categories}}
        <a href="/learn/{{url}}">
          <h5 style="color: #007B89">{{text}}</h5>
        </a>
        {{/each}}
      </div>
    </div>

    <!-- Login  -->
    <button class="sign" onclick="document.getElementById('id01').style.display='block'"
      style="width:auto;">Login</button>

    <div id="id01" class="modal">

      <form class="modal-content animate" action="/action_page.php">
        <div class="imgcontainer">
          <span onclick="document.getElementById('id01').style.display='none'" class="close"
            title="Close Modal">&times;</span>
          <img src="../images/login.png" alt="Avatar" class="avatar">
        </div>

        <div class="login-container">
          <label for="uname"><b>Username</b></label>
          <input type="text" placeholder="Enter Username" name="uname" required>

          <label for="psw"><b>Password</b></label>
          <input type="password" placeholder="Enter Password" name="psw" required>

          <button class="login-button" type="submit">Login</button>
          <label>
            <input type="checkbox" checked="checked" name="remember"> Remember me
          </label>
        </div>

        <div class="login-container" style="background-color:#f1f1f1">
          <button type="button" onclick="document.getElementById('id01').style.display='none'"
            class="cancelbtn">Cancel</button>
          <span class="psw">Forgot <a href="#">password?</a></span>
        </div>
      </form>
    </div>

  </div>

</header>

<!-- main section of the page -->

<div class="container">

  <h1>Teach!</h1>
  <hr>
  <h2> Host a class for your neighbors.</h2>
  <div class="AppDescriptionContainer">
    <p>Fill out the form with all the details about your class then hit &ldquo;Add Class&rdquo; to publish.
    </p>
  </div>
  <div class="teachForm">
    <!-- https://getbootstrap.com/docs/4.0/components/forms/ -->
    <!-- https://getbootstrap.com/docs/4.3/components/forms/ -->
    <form id="addClass">
      <div class="form-group">
        <label for="teachersName">Teacher&rsquo;s Name:</label>
        <textarea class="form-control" id="teachersName" rows="1"></textarea>
      </div>
      <div class="form-group">
        <label for="eventname">Event Name:</label>
        <textarea class="form-control" id="eventName" rows="1"></textarea>

      </div>
      <div class="form-group">
        <label for="categorySelect">Select a category for your class type:</label>
        <select class="form-control" id="categorySelect">
          <option>Select a category:</option>
          {{#each categories}}
          <option>{{text}}</option>
          {{/each}}
        </select>
      </div>
      <div class="form-group">
        <label for="location">Location address:</label>
        <textarea class="form-control" id="location" rows="4"></textarea>
      </div>
      <div class="form-group">
        <label for="location">Date:</label>
        <textarea class="form-control" id="date" rows="1"></textarea>
      </div>
      <div class="form-group">
        <label for="location">Time:</label>
        <textarea class="form-control" id="time" rows="1"></textarea>
      </div>
      <div class="form-group">
        <label for="location">Description:</label>
        <textarea class="form-control" id="description" rows="8"></textarea>
      </div>
      <button type="submit" class="btn btn-success addClassbtn">Add Class</button>
    </form>
  </div>
  <hr>

  <h2>The classes you are currently hosting:</h2>
  <div class="classesListedUnderTeacher">
    <p>See who&rsquo;s signed up for your classes. Make updates to or delete your classes.</p>

    <div class="row">
      <div class="col-12">
        <div class="card">
          <div class="card-body">
            <div class="classContainer" id="class-container">


              {{!-- adding chosen code --}}
              <ul id="allClassesTaughtByTeacher" class="list-group">
                {{#each classes}}
                <li class='ClassWithThisTeacher' data-completed='{{completed}}' data-class='{{id}}'>
                  <p class='teacher' id='teacherName{{id}}'></p>
                  <h1 id='eventName{{id}}'> Class: {{eventname}}</h1>
                  <p class='teacher' id='teacherName{{id}}'><strong>Taught by:</strong> {{teacher}}</p>
                  <p><strong>Location:</strong> {{eventlocation}}</p>
                  <p><strong>Date:</strong> {{eventdate}}</p>
                  <p><strong>Time:</strong> {{eventtime}}</p>
                  <p><strong>Description:</strong> {{eventdescription}} </p>
                  <div class="text-center">
                    <button type="button" class="btn btn-lg btn-success updateButton">
                      <h4>Update</h4>
                    </button>
                    <button type="button" data-id='{{id}}' class="deleteButton btn btn-danger btn-lg">
                      <h4>Delete</h4>
                    </button>
                    </h4>
                    </button>
                  </div>
                </li>
                {{/each}}
              </ul>


            </div>
          </div>
        </div>
      </div>
    </div>

  </div>
</div>

<hr>
<div class="AppDescriptionContainer">
  <p>Search for a different type of class.
  </p>
</div>
{{!-- container to house category buttons --}}
<div class="classCategoriesContainer" align="center"></div>

<footer class="footer">
  <div class="container">
    <img src="/images/githublogo.png" style="width:30px">
    <a href="https://github.com/wliang002/Project_2" target="_blank">GitHub Repo</a>
  </div>
</footer>
<!-- Custom Script -->
{{!-- I tried to connect to the js but it doesn't read it so I had to add it in here directly --}}
<script src="/public/js/index.js" type="text/javascript"></script>
<script>
  // run everything when the window loads
  window.onload = function () {
    console.log('index page has loaded')
    // Get references to page elements
    var $classCategoriesContainer = document.querySelector('.classCategoriesContainer')
    var $dropDownContent = document.querySelector('.dropdown-content')

    // our initial categories array
    var categories = []

    // our initial unique categories buttons and drop downs to add
    var uniqueCategoriesButtonsToAdd = []
    var uniqueDropDownsToAdd = []

    // getting categories when the page loads
    getCategories()

    // this function clears existing buttons
    function clearExistingButtons() {
      $classCategoriesContainer.innerHTML = ''
      $dropDownContent.innerHTML = ''
      console.log('all existing categories buttons have been erased')
    }

    // this function removes duplicate categoryButtons
    function getUnique(array) {
      var uniqueArray = []
      for (i = 0; i < array.length; i++) {
        if (uniqueArray.indexOf(array[i]) === -1) {
          uniqueArray.push(array[i])
        }
      }
      return uniqueArray
    }

    // this function displays the category buttons
    function displayButtons() {
      console.log('displayButtons function was called')
      clearExistingButtons()
      var categoryButtonsToAdd = []
      for (var i = 0; i < categories.length; i++) {
        categoryButtonsToAdd.push(createNewCategoryButton(categories[i]))
      }
      console.log('these are the categoryButtonsToAdd: ' + categoryButtonsToAdd)
      // capture only unique buttons
      uniqueCategoryButtonsToAdd = getUnique(categoryButtonsToAdd)
      console.log('the new unique buttons are: ' + uniqueCategoryButtonsToAdd)

      $classCategoriesContainer.insertAdjacentHTML('afterbegin', uniqueCategoryButtonsToAdd.join(''))
    }

    // this function displays the dropdowns
    function displayDropDowns() {
      console.log('displayDropDownsfunction was called')
      var DropDownsToAdd = []
      for (var i = 0; i < categories.length; i++) {
        DropDownsToAdd.push(createNewDropDowns(categories[i]))
      }
      console.log('these are the DropDownsToAdd: ' + DropDownsToAdd)
      // capture only unique buttons
      uniqueDropDownsToAdd = getUnique(DropDownsToAdd)
      console.log('the new unique dropdowns are: ' + uniqueDropDownsToAdd)
      $dropDownContent.insertAdjacentHTML('afterbegin', uniqueDropDownsToAdd.join(''))
    }

    // this function grabs the categories from the database and updates the view
    function getCategories() {
      fetch('/allData')
        .then(results => results.json())
        .then(function (data) {
          categories = data
          console.log('got all data', categories)
          displayButtons(categories)
          displayDropDowns(categories)
        })
    }

    // this function constructs a new category button
    function createNewCategoryButton(category) {
      console.log('createNewCategoryButton function was called')
      let newCategoryButton = `<a href="/learn/${category.category}"><button type="button" class="btn btn-lg btn-success categoryButton" data-id='${category.category}'><h4>${category.category}</h4></button></a>`
      return newCategoryButton
    }

    // this function constructs a dropdown menu
    function createNewDropDowns(category) {
      console.log('createNewDropDowns was called')
      let newDropDowns = `<a class="dropdown-item" href="/learn/${category.category}">${category.category}</a>`
      return newDropDowns
    }
  }

  // Getting references to the input field where user adds a new class
  var $newTname = document.querySelector('#teachersName')
  var $newEvent = document.querySelector('#eventName')
  var $newCategory = document.querySelector('#categorySelect')
  var $newLocation = document.querySelector('#location')
  var $newDate = document.querySelector('#date')
  var $newTime = document.querySelector('#time')
  var $newDescript = document.querySelector('#description')

  //defining the container to house the classes
  var $classContainer = document.querySelector('#class-container')

  // This function inserts a new class into our database
  function insertClass(event) {
    event.preventDefault();

    //form validation
    function validateForm() {
      var isValid = true;
      //jQuery method
      {
        {
          !--$(".form-control").each(function () {
            if ($(this).val() === "") {
              isValid = false;
            }
          }); --}
      }
      //vanilla javscript method
      var formFields = document.getElementsByClassName('form-control')
      for (var i = 0; i < formFields.length, i++) {
        if (formFields[i].value === '' {
          isValid = false;
        }
        return isValid;
      }
    }

    //if all fields are filled
    if (validateForm()) {
      //create an object for the class
      var lecture = {
        teacher: $newTname.value,
        eventname: $newEvent.value,
        category: $newCategory.value,
        eventlocation: $newLocation.value,
        eventdate: $newDate.value,
        eventtime: $newTime.value,
        eventdescription: $newDescript.value
      }
      // Send the POST request.
      fetch('/teach', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(lecture)
      })
        // On success, run the following code
        .then(function (data) {
          // Log the data we found
          console.log(data)
        })
      //reset all the fields
      $newTname.value = ''
      $newEvent.value = ''
      $newCategory.value = ''
      $newLocation.value = ''
      $newDate.value = ''
      $newTime.value = ''
      $newDescript.value = ''
    } else {
      alert("Please fill out all the fields before submitting")
    }

  }

  //event listener for submit button that calls the insertClass function
  document.querySelector('#addClass').addEventListener('submit', insertClass)

  //defining the container that houses the classes
  var $classContainer = document.querySelector('#class-container')

  // Adding event listeners for deleting, editing, and adding classes
  $classContainer.addEventListener('click', function (event) {
    if (event.target.nodeName === 'BUTTON') {
      if (event.target.matches('button.deleteButton')) {
        // DELETE BTN
        event.stopPropagation()
        let id = event.target.dataset.id
        fetch('/teach/' + id, {
          method: 'DELETE'
        })
          .then(function (data) {
            getClasses()
          })
      } else if (event.target.matches('button.complete')) {

        event.stopPropagation()
        let tParent = event.target.parentNode
        let tName = tParent.querySelector(`teacherName${tParent.dataset.classes}`)
        let eName = tParent.querySelector(`eventName${tParent.dataset.classes}`)
        let category = tParent.querySelector(`eventCat${tParent.dataset.classes}`)
        let eLocation = tParent.querySelector(`eventLoc${tParent.dataset.classes}`)
        let eDate = tParent.querySelector(`eventDate${tParent.dataset.classes}`)
        let eTime = tParent.querySelector(`eventTime${tParent.dataset.classes}`)
        let eDescript = tParent.querySelector(`eventDescript${tParent.dataset.classes}`)

        let classes = {
          id: tParent.dataset.classes,
          teacher: tParent.dataset.tName,
          eventname: tParent.dataset.eName,
          category: tParent.dataset.category,
          eventlocation: tParent.dataset.eLocation,
          eventdate: tParent.dataset.eDate,
          eventtime: tParent.dataset.eTime,
          eventdescription: tParent.dataset.eDescript

        }
      }
    }
  })

</script>